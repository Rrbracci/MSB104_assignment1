---
title: "MSB104_assignment1"
author: "Rrbracci & AGaard01"
format: html
editor: visual
bibliography: [MSB104_Assignment1.bib]
---

```{r}
#| label: setup
#| output: false
#| message: false
#| echo: false
library(eurostat)
library(dineq)
library(tidyverse)
library(gridExtra)
library(modelr)
library(grid)
library(ggplotify)
library(vtable)
library(dplyr)
library(dineq)
```

# **Data Acquisition**

## Population per sub-region in DE, FI & RO

```{r}
# Downloaded file for population in DE (Germany), FI (Finland) and RO (Romania). Furthermore, we load up the file i RStudio by import the file in Library(readr). Moreover, we commended RStudio to read the file "demo_r_pjanaggr3_page_linear_csv". Additionally, we implemented the function na = "NA" for RStudio to read the missing values. Lastly, we added the function "show_col_types = FALSE" to prevent RStudio displaying the column data types while reading the file. 
library(readr)
demo_r_pjanaggr3_page_linear_csv <- read_csv("demo_r_pjanaggr3_page_linear.csv.gz", 
    na = "NA", show_col_types = FALSE)
```

```{r}
# First step was to rename the file for the assigned countries (DE, FI & RO). Furthermore, we utilized the function filter with str_sub considering a better overview of relevant dataset. Lastly, we were interested in population in every sub_regionals in the relevant contries. To receive and organise the relevant data, the function "Select" was used.  
DE_FI_RO_pop <- demo_r_pjanaggr3_page_linear_csv |>
	filter(str_sub
	       (geo, start = 1L, end = 2L) %in% c("DE", "FI", "RO")) |>
	select(Year = TIME_PERIOD, Sub_regions = geo, Population = OBS_VALUE)
```

```{r}
#| paged.print: false
# Table with overview of population per region in the countries of Germany, Finland and Romania.
DE_FI_RO_pop |> 
  print(
    n = 5 ,
    width = 100 ,
    )
```

## GDP per sub-region in DE, FI & RO

```{r}
# Downloaded file for GDP in DE (Germany), FI (Finland) and RO (Romania). Furthermore, we load up the file i RStudio by import the file in Library(readr). Moreover, we commended RStudio to read the file "nama_10r_3gdp_page_linear_csv". Additionally, we implemented the function na = "NA" for RStudio to read the missing values. Lastly, we added the function "show_col_types = FALSE" to prevent RStudio displaying the column data types while reading the file. 
library(readr)
nama_10r_3gdp_page_linear_csv <- read_csv("nama_10r_3gdp_page_linear.csv.gz", 
    na = "NA", show_col_types = FALSE)
```

```{r}
# First step was to rename the file for the assigned countries (DE, FI & RO). Furthermore, we utilized the function filter with str_sub considering a better overview of relevant dataset. Lastly, we were interested in population in every sub_regionals in the relevant contries. To receive and organise the relevant data, the function "Select" was used.  
DE_FI_RO_gdp <- nama_10r_3gdp_page_linear_csv |>
	filter(str_sub
	       (geo, start = 1L, end = 2L) %in% c("DE", "FI", "RO")) |>
	select(Year = TIME_PERIOD, Sub_regions = geo, GDP = OBS_VALUE)
```

```{r}
#| paged.print: false
# Table with overview of GPD per region in the countries of Germany, Finland and Romania.
DE_FI_RO_gdp |> 
  print(
    n = 5 ,
    width = 100 ,
    )
```

## Overview of presented datasets and structure

# **GDP per Capita Calculation**

```{r}
# Merging data
merged_data <- merge(DE_FI_RO_pop, DE_FI_RO_gdp) 
```

```{r}
merged_data <- merged_data |> 
  mutate(GDP_per_capita = GDP/Population)
```

```{r}
summary(merged_data)
```

GINI

```{r}
merged_data <- merged_data %>%
  mutate(id_nuts2 = substr(Sub_regions,1,4))
#Gen Nuts 2 id
merged_temp <- merged_data %>%
group_by(id_nuts2, Year) %>%
mutate(gini_n2 = gini.wtd(GDP, Population)*100000) %>%
ungroup() # to remove grouping
```

```{r}
merged_temp <- merged_temp %>%
  mutate(id_nuts2 = substr(Sub_regions, 1,4),
          id_nuts0 = substr(Sub_regions, 1,2)) %>%
select(Year, Sub_regions, Population, GDP, GDP_per_capita, id_nuts0, id_nuts2, gini_n2)
```

```{r}
#gen weighted gini
#for all
w.cv(data$gdp)
```

Colapsing dataset by id.
Function "first(nuts2, year)

Look at the region that has 0.
It means that the gini is very low and means it is missing data.
Might be an outlier and we maybe have to deleting it.
